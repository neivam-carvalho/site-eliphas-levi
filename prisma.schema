// Prisma schema for Loja Maçônica de São Paulo
// Banco de dados: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  role        Role     // 'MEMBER', 'ADMIN'
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profile     Profile?
  posts       Post[]
  accesses    AccessLog[]
}

enum Role {
  MEMBER
  ADMIN
}

model Profile {
  id        String  @id @default(uuid())
  userId    String  @unique
  phone     String?
  address   String?
  bio       String?
  user      User    @relation(fields: [userId], references: [id])
}

model Mason {
  id        String  @id @default(uuid())
  name      String
  email     String  @unique
  password  String
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
}

model PublicContent {
  id        String   @id @default(uuid())
  title     String
  body      String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category  Category @relation(fields: [categoryId], references: [id])
  categoryId String
}

model MasonContent {
  id        String   @id @default(uuid())
  title     String
  body      String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category  Category @relation(fields: [categoryId], references: [id])
  categoryId String
}

model MemberContent {
  id        String   @id @default(uuid())
  title     String
  body      String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category  Category @relation(fields: [categoryId], references: [id])
  categoryId String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Category {
  id        String   @id @default(uuid())
  name      String
  publicContents PublicContent[]
  masonContents  MasonContent[]
  memberContents MemberContent[]
}

model AccessLog {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  action    String
  createdAt DateTime @default(now())
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String  @unique
  password  String
  createdAt DateTime @default(now())
}

// Senha fixa para área de maçons
model MasonAccess {
  id        String   @id @default(uuid())
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
